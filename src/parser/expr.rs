// This file is generated by generate_ast.rs
use crate::lexer::{Token, Literal};
use crate::{RuntimeError, Value};

pub trait Visitor {
    fn visit_literal_expr(&mut self, value: &Literal) -> Result<Value, RuntimeError>;
    fn visit_grouping_expr(&mut self, expr: &Expr) -> Result<Value, RuntimeError>;
    fn visit_unary_expr(&mut self, operator: &Token, right: &Expr) -> Result<Value, RuntimeError>;
    fn visit_binary_expr(
        &mut self,
        left: &Expr,
        operator: &Token,
        right: &Expr,
    ) -> Result<Value, RuntimeError>;
    fn visit_variable_expr(&mut self, token: &Token, initializer: &Option<Box<Expr>>) -> Result<Value, RuntimeError>;
    fn visit_assign_expr(&mut self, token: &Token, value: &Expr) -> Result<Value, RuntimeError>;

    fn visit_logical_expr(
        &mut self,
        left: &Expr,
        operator: &Token,
        right: &Expr,
    ) -> Result<Value, RuntimeError>;
    fn visit_call_expr(
        &mut self,
        callee: &Expr,
        paren:  &Token,
        arguments: &[Expr],
    ) -> Result<Value, RuntimeError>;
    fn visit_get_expr(
        &mut self, object: &Expr, name: &Token
    ) -> Result<Value, RuntimeError>;
    fn visit_set_expr(
        &mut self, object: &Expr, name: &Token, value: &Expr
    ) -> Result<Value, RuntimeError>;
    fn visit_this_expr(
        &mut self, this: &Token
    ) -> Result<Value, RuntimeError>;
    fn visit_super_expr(
        &mut self, keyword: &Token, method: &Token
    ) -> Result<Value, RuntimeError>;
}

#[derive(Debug, Clone)]
#[derive(Eq, Hash, PartialEq)]
pub enum Expr {
    Binary {
        left: Box<Expr>,
        operator: Token,
        right: Box<Expr>,
    },
    Grouping {
        expression: Box<Expr>,
    },
    Literal {
        value: Literal,
    },
    Unary {
        operator: Token,
        right: Box<Expr>,
    },
    Variable {
        name: Token,
        initializer: Option<Box<Expr>>,
    },
    Assign {
        name: Token,
        value: Box<Expr>,
    },
    Logical {
        left: Box<Expr>,
        operator: Token,
        right: Box<Expr>,
    },
    Call {
        callee: Box<Expr>,
        paren: Token, // for error reporting
        arguments: Vec<Expr>, // can be zero or more
    },
    Get {
        object: Box<Expr>,
        name: Token,
    },
    Set {
        object: Box<Expr>,
        name: Token,
        value: Box<Expr>,
    },
    This {
        keyword: Token
    },
    Super {
        keyword: Token, method: Token
    }
}

impl Expr {
    pub fn accept(&self, visitor: &mut impl Visitor) -> Result<Value, RuntimeError> {
        match self {
            Expr::Literal { value } => visitor.visit_literal_expr(&value),
            Expr::Grouping { expression } => visitor.visit_grouping_expr(&expression),
            Expr::Unary { operator, right } => visitor.visit_unary_expr(&operator, &right),
            Expr::Binary {
                left,
                operator,
                right,
            } => visitor.visit_binary_expr(&left, &operator, &right),
            Expr::Variable { name, initializer } => visitor.visit_variable_expr(name, initializer),
            Expr::Assign { name, value } => visitor.visit_assign_expr(name, value),
            Expr::Logical {
                left,
                operator,
                right,
            } => visitor.visit_logical_expr(&left, &operator, &right),
            Expr::Call {
                callee,
                paren,
                arguments
            } => visitor.visit_call_expr(callee, paren, arguments),
            Expr::Get {
                object, name
            } => visitor.visit_get_expr(object, name),
            Expr::Set {
                object, name, value
            } => visitor.visit_set_expr(object, name, value),
            Expr::This {
                keyword
            } => visitor.visit_this_expr(keyword),
            Expr::Super {
                keyword, method
            } => visitor.visit_super_expr(keyword, method),
        }
    }
}
