// This file is generated by generate_ast.rs
use crate::lexer::{Token, Literal};
use crate::{RuntimeError, Value};

pub trait Visitor {
    fn visit_literal_expr(&mut self, value: &Literal) -> Result<Value, RuntimeError>;
    fn visit_grouping_expr(&mut self, expr: &Expr) -> Result<Value, RuntimeError>;
    fn visit_unary_expr(&mut self, operator: &Token, right: &Expr) -> Result<Value, RuntimeError>;
    fn visit_binary_expr(
        &mut self,
        left: &Expr,
        operator: &Token,
        right: &Expr,
    ) -> Result<Value, RuntimeError>;
    fn visit_variable_expr(&mut self, token: &Token, initializer: &Option<Box<Expr>>) -> Result<Value, RuntimeError>;
    fn visit_assign_expr(&mut self, token: &Token, value: &Expr) -> Result<Value, RuntimeError>;
}

pub enum Expr {
    Binary {
        left: Box<Expr>,
        operator: Token,
        right: Box<Expr>,
    },
    Grouping {
        expression: Box<Expr>,
    },
    Literal {
        value: Literal,
    },
    Unary {
        operator: Token,
        right: Box<Expr>,
    },
    Variable {
        name: Token,
        initializer: Option<Box<Expr>>,
    },
    Assign {
        name: Token,
        value: Box<Expr>,
    },
}

impl Expr {
    pub fn accept(&self, visitor: &mut impl Visitor) -> Result<Value, RuntimeError> {
        match self {
            Expr::Literal { value } => visitor.visit_literal_expr(&value),
            Expr::Grouping { expression } => visitor.visit_grouping_expr(&expression),
            Expr::Unary { operator, right } => visitor.visit_unary_expr(&operator, &right),
            Expr::Binary {
                left,
                operator,
                right,
            } => visitor.visit_binary_expr(&left, &operator, &right),
            Expr::Variable { name, initializer } => visitor.visit_variable_expr(name, initializer),
            Expr::Assign { name, value } => visitor.visit_assign_expr(name, value),
        }
    }
}
